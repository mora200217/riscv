
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4288 (git sha1 b2e97174, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1630451134687/work=/usr/local/src/conda/yosys-0.9_5586_gb2e97174 -fdebug-prefix-map=/home/carlos/miniconda3/envs/fpga=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)


-- Parsing `MappedSPIFlash_V3.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: MappedSPIFlash_V3.v
Parsing Verilog input from `MappedSPIFlash_V3.v' to AST representation.
Generating RTLIL representation for module `\MappedSPIFlash'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top MappedSPIFlash -json MappedSPIFlash.json; write_verilog -attr2comment MappedSPIFlash_synth.v' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \MappedSPIFlash

2.2.2. Analyzing design hierarchy..
Top module:  \MappedSPIFlash
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$258 in module SB_DFFNES.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$251 in module SB_DFFNESS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$247 in module SB_DFFNER.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$240 in module SB_DFFNESR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$237 in module SB_DFFNS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$234 in module SB_DFFNSS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$231 in module SB_DFFNR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$228 in module SB_DFFNSR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$220 in module SB_DFFES.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$213 in module SB_DFFESS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$209 in module SB_DFFER.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$202 in module SB_DFFESR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$199 in module SB_DFFS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$196 in module SB_DFFSS.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$193 in module SB_DFFR.
Marked 1 switch rules as full_case in process $proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$190 in module SB_DFFSR.
Marked 7 switch rules as full_case in process $proc$MappedSPIFlash_V3.v:67$12 in module MappedSPIFlash.
Marked 2 switch rules as full_case in process $proc$MappedSPIFlash_V3.v:43$1 in module MappedSPIFlash.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 10 redundant assignments.
Promoted 23 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$261'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$257'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$250'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$246'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$239'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$236'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$233'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$230'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$227'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$225'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$223'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$219'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$212'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$208'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$201'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$198'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$195'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$192'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$189'.
  Set init value: \Q = 1'0
Found init rule in `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$187'.
  Set init value: \Q = 1'0

2.3.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \S in `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$258'.
Found async reset \R in `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$247'.
Found async reset \S in `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$237'.
Found async reset \R in `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$231'.
Found async reset \S in `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$220'.
Found async reset \R in `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$209'.
Found async reset \S in `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$199'.
Found async reset \R in `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$193'.

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$261'.
Creating decoders for process `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$258'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Creating decoders for process `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$251'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$250'.
Creating decoders for process `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$247'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$246'.
Creating decoders for process `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$240'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$239'.
Creating decoders for process `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$237'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$236'.
Creating decoders for process `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$234'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Creating decoders for process `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$231'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Creating decoders for process `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$228'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$227'.
Creating decoders for process `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$226'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$225'.
Creating decoders for process `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:846$224'.
Creating decoders for process `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Creating decoders for process `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$220'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Creating decoders for process `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$213'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$212'.
Creating decoders for process `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$209'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Creating decoders for process `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$202'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$201'.
Creating decoders for process `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$199'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$198'.
Creating decoders for process `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$196'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Creating decoders for process `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$193'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$192'.
Creating decoders for process `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$190'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$189'.
Creating decoders for process `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$188'.
     1/1: $0\Q[0:0]
Creating decoders for process `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$187'.
Creating decoders for process `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:269$186'.
Creating decoders for process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
     1/13: $7\state[2:0]
     2/13: $6\state[2:0]
     3/13: $5\state[2:0]
     4/13: $4\state[2:0]
     5/13: $3\state[2:0]
     6/13: $2\state[2:0]
     7/13: $1\state[2:0]
     8/13: $0\rcv_data[31:0]
     9/13: $0\rcv_bitcount[5:0]
    10/13: $0\cmd_addr[31:0]
    11/13: $0\snd_bitcount[5:0]
    12/13: $0\CS_N[0:0]
    13/13: $0\rbusy[0:0]
Creating decoders for process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
     1/3: $0\div_counter[5:0]
     2/3: $0\clk_div[0:0]
     3/3: $0\CLK[0:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\SB_DFFNES.\Q' using process `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$258'.
  created $adff cell `$procdff$620' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESS.\Q' using process `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$251'.
  created $dff cell `$procdff$621' with negative edge clock.
Creating register for signal `\SB_DFFNER.\Q' using process `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$247'.
  created $adff cell `$procdff$622' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNESR.\Q' using process `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$240'.
  created $dff cell `$procdff$623' with negative edge clock.
Creating register for signal `\SB_DFFNS.\Q' using process `\SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$237'.
  created $adff cell `$procdff$624' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSS.\Q' using process `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$234'.
  created $dff cell `$procdff$625' with negative edge clock.
Creating register for signal `\SB_DFFNR.\Q' using process `\SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$231'.
  created $adff cell `$procdff$626' with negative edge clock and positive level reset.
Creating register for signal `\SB_DFFNSR.\Q' using process `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$228'.
  created $dff cell `$procdff$627' with negative edge clock.
Creating register for signal `\SB_DFFNE.\Q' using process `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$226'.
  created $dff cell `$procdff$628' with negative edge clock.
Creating register for signal `\SB_DFFN.\Q' using process `\SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:846$224'.
  created $dff cell `$procdff$629' with negative edge clock.
Creating register for signal `\SB_DFFES.\Q' using process `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$220'.
  created $adff cell `$procdff$630' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESS.\Q' using process `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$213'.
  created $dff cell `$procdff$631' with positive edge clock.
Creating register for signal `\SB_DFFER.\Q' using process `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$209'.
  created $adff cell `$procdff$632' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFESR.\Q' using process `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$202'.
  created $dff cell `$procdff$633' with positive edge clock.
Creating register for signal `\SB_DFFS.\Q' using process `\SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$199'.
  created $adff cell `$procdff$634' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSS.\Q' using process `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$196'.
  created $dff cell `$procdff$635' with positive edge clock.
Creating register for signal `\SB_DFFR.\Q' using process `\SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$193'.
  created $adff cell `$procdff$636' with positive edge clock and positive level reset.
Creating register for signal `\SB_DFFSR.\Q' using process `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$190'.
  created $dff cell `$procdff$637' with positive edge clock.
Creating register for signal `\SB_DFFE.\Q' using process `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$188'.
  created $dff cell `$procdff$638' with positive edge clock.
Creating register for signal `\SB_DFF.\Q' using process `\SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:269$186'.
  created $dff cell `$procdff$639' with positive edge clock.
Creating register for signal `\MappedSPIFlash.\rbusy' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$640' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\CS_N' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$641' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\state' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$642' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\snd_bitcount' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$643' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\cmd_addr' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$644' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\rcv_bitcount' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$645' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\rcv_data' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
  created $dff cell `$procdff$646' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\CLK' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
  created $dff cell `$procdff$647' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\clk_div' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
  created $dff cell `$procdff$648' with negative edge clock.
Creating register for signal `\MappedSPIFlash.\div_counter' using process `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
  created $dff cell `$procdff$649' with negative edge clock.

2.3.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.3.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$261'.
Found and cleaned up 1 empty switch in `\SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$258'.
Removing empty process `SB_DFFNES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1346$258'.
Removing empty process `SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$257'.
Found and cleaned up 2 empty switches in `\SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$251'.
Removing empty process `SB_DFFNESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1290$251'.
Removing empty process `SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$250'.
Found and cleaned up 1 empty switch in `\SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$247'.
Removing empty process `SB_DFFNER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1215$247'.
Removing empty process `SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$246'.
Found and cleaned up 2 empty switches in `\SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$240'.
Removing empty process `SB_DFFNESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1159$240'.
Removing empty process `SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$239'.
Removing empty process `SB_DFFNS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1090$237'.
Removing empty process `SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$236'.
Found and cleaned up 1 empty switch in `\SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$234'.
Removing empty process `SB_DFFNSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:1042$234'.
Removing empty process `SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$233'.
Removing empty process `SB_DFFNR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:973$231'.
Removing empty process `SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$230'.
Found and cleaned up 1 empty switch in `\SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$228'.
Removing empty process `SB_DFFNSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:925$228'.
Removing empty process `SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$227'.
Found and cleaned up 1 empty switch in `\SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$226'.
Removing empty process `SB_DFFNE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:882$226'.
Removing empty process `SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$225'.
Removing empty process `SB_DFFN.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:846$224'.
Removing empty process `SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$223'.
Found and cleaned up 1 empty switch in `\SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$220'.
Removing empty process `SB_DFFES.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:769$220'.
Removing empty process `SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$219'.
Found and cleaned up 2 empty switches in `\SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$213'.
Removing empty process `SB_DFFESS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:713$213'.
Removing empty process `SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$212'.
Found and cleaned up 1 empty switch in `\SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$209'.
Removing empty process `SB_DFFER.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:638$209'.
Removing empty process `SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$208'.
Found and cleaned up 2 empty switches in `\SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$202'.
Removing empty process `SB_DFFESR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:582$202'.
Removing empty process `SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$201'.
Removing empty process `SB_DFFS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:513$199'.
Removing empty process `SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$198'.
Found and cleaned up 1 empty switch in `\SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$196'.
Removing empty process `SB_DFFSS.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:465$196'.
Removing empty process `SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$195'.
Removing empty process `SB_DFFR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:396$193'.
Removing empty process `SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$192'.
Found and cleaned up 1 empty switch in `\SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$190'.
Removing empty process `SB_DFFSR.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:348$190'.
Removing empty process `SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$189'.
Found and cleaned up 1 empty switch in `\SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$188'.
Removing empty process `SB_DFFE.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:305$188'.
Removing empty process `SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:0$187'.
Removing empty process `SB_DFF.$proc$/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_sim.v:269$186'.
Found and cleaned up 7 empty switches in `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
Removing empty process `MappedSPIFlash.$proc$MappedSPIFlash_V3.v:67$12'.
Found and cleaned up 3 empty switches in `\MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
Removing empty process `MappedSPIFlash.$proc$MappedSPIFlash_V3.v:43$1'.
Cleaned up 28 empty switches.

2.3.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.4. Executing FLATTEN pass (flatten design).

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 2 unused cells and 60 unused wires.

2.9. Executing CHECK pass (checking for obvious problems).
Checking module MappedSPIFlash...
Found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 21 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$447.
    dead port 2/2 on $mux $procmux$449.
    dead port 2/2 on $mux $procmux$452.
    dead port 2/2 on $mux $procmux$458.
    dead port 2/2 on $mux $procmux$461.
    dead port 2/2 on $mux $procmux$469.
    dead port 2/2 on $mux $procmux$471.
    dead port 2/2 on $mux $procmux$474.
    dead port 2/2 on $mux $procmux$481.
    dead port 2/2 on $mux $procmux$484.
    dead port 2/2 on $mux $procmux$492.
    dead port 2/2 on $mux $procmux$495.
    dead port 2/2 on $mux $procmux$504.
Removed 13 multiplexer ports.

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.10.6. Executing OPT_DFF pass (perform DFF optimizations).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 34 unused wires.

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.10.9. Rerunning OPT passes. (Maybe there is more to do..)

2.10.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.10.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.10.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.10.13. Executing OPT_DFF pass (perform DFF optimizations).

2.10.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.10.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.10.16. Finished OPT passes. (There is nothing left to do.)

2.11. Executing FSM pass (extract and optimize FSM).

2.11.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register MappedSPIFlash.state.

2.11.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\MappedSPIFlash'.
  found $dff cell for state register: $procdff$642
  root of input selection tree: $0\state[2:0]
  found reset state: 3'000 (guessed from mux tree)
  found ctrl input: \reset
  found state code: 3'000
  found ctrl input: $procmux$450_CMP
  found ctrl input: $procmux$472_CMP
  found ctrl input: $procmux$493_CMP
  found ctrl input: $procmux$502_CMP
  found ctrl input: \clk_div
  found ctrl input: $eq$MappedSPIFlash_V3.v:113$16_Y
  found state code: 3'011
  found ctrl input: $eq$MappedSPIFlash_V3.v:97$14_Y
  found state code: 3'010
  found ctrl input: \rstrb
  found state code: 3'001
  found ctrl output: $procmux$450_CMP
  found ctrl output: $procmux$472_CMP
  found ctrl output: $procmux$493_CMP
  found ctrl output: $procmux$502_CMP
  ctrl inputs: { $eq$MappedSPIFlash_V3.v:113$16_Y $eq$MappedSPIFlash_V3.v:97$14_Y \clk_div \rstrb \reset }
  ctrl outputs: { $procmux$502_CMP $procmux$493_CMP $procmux$472_CMP $procmux$450_CMP $0\state[2:0] }
  transition:      3'000 5'----0 ->      3'000 7'1000000
  transition:      3'000 5'----1 ->      3'001 7'1000001
  transition:      3'010 5'----0 ->      3'000 7'0010000
  transition:      3'010 5'--0-1 ->      3'010 7'0010010
  transition:      3'010 5'-01-1 ->      3'010 7'0010010
  transition:      3'010 5'-11-1 ->      3'011 7'0010011
  transition:      3'001 5'----0 ->      3'000 7'0100000
  transition:      3'001 5'---01 ->      3'001 7'0100001
  transition:      3'001 5'---11 ->      3'010 7'0100010
  transition:      3'011 5'----0 ->      3'000 7'0001000
  transition:      3'011 5'--0-1 ->      3'011 7'0001011
  transition:      3'011 5'0-1-1 ->      3'011 7'0001011
  transition:      3'011 5'1-1-1 ->      3'000 7'0001000

2.11.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$650' from module `\MappedSPIFlash'.

2.11.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 12 unused cells and 12 unused wires.

2.11.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$650' from module `\MappedSPIFlash'.
  Removing unused output signal $0\state[2:0] [0].
  Removing unused output signal $0\state[2:0] [1].
  Removing unused output signal $0\state[2:0] [2].

2.11.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$650' from module `\MappedSPIFlash' using `auto' encoding:
  mapping auto encoding to `one-hot` for this FSM.
  000 -> ---1
  010 -> --1-
  001 -> -1--
  011 -> 1---

2.11.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$650' from module `MappedSPIFlash':
-------------------------------------

  Information on FSM $fsm$\state$650 (\state):

  Number of input signals:    5
  Number of output signals:   4
  Number of state bits:       4

  Input signals:
    0: \reset
    1: \rstrb
    2: \clk_div
    3: $eq$MappedSPIFlash_V3.v:97$14_Y
    4: $eq$MappedSPIFlash_V3.v:113$16_Y

  Output signals:
    0: $procmux$450_CMP
    1: $procmux$472_CMP
    2: $procmux$493_CMP
    3: $procmux$502_CMP

  State encoding:
    0:     4'---1  <RESET STATE>
    1:     4'--1-
    2:     4'-1--
    3:     4'1---

  Transition Table (state_in, ctrl_in, state_out, ctrl_out):
      0:     0 5'----0   ->     0 4'1000
      1:     0 5'----1   ->     2 4'1000
      2:     1 5'----0   ->     0 4'0010
      3:     1 5'--0-1   ->     1 4'0010
      4:     1 5'-01-1   ->     1 4'0010
      5:     1 5'-11-1   ->     3 4'0010
      6:     2 5'----0   ->     0 4'0100
      7:     2 5'---11   ->     1 4'0100
      8:     2 5'---01   ->     2 4'0100
      9:     3 5'----0   ->     0 4'0001
     10:     3 5'1-1-1   ->     0 4'0001
     11:     3 5'--0-1   ->     3 4'0001
     12:     3 5'0-1-1   ->     3 4'0001

-------------------------------------

2.11.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$650' from module `\MappedSPIFlash'.

2.12. Executing OPT pass (performing simple optimizations).

2.12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 1 cells.

2.12.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.12.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.12.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.12.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$649 ($dff) from module MappedSPIFlash (D = $add$MappedSPIFlash_V3.v:57$7_Y [5:0], Q = \div_counter, rval = 6'000000).
Adding SRST signal on $procdff$648 ($dff) from module MappedSPIFlash (D = $procmux$607_Y, Q = \clk_div, rval = 1'0).
Adding SRST signal on $procdff$647 ($dff) from module MappedSPIFlash (D = $procmux$615_Y, Q = \CLK, rval = 1'0).
Adding EN signal on $auto$opt_dff.cc:682:run$708 ($sdff) from module MappedSPIFlash (D = $procmux$615_Y, Q = \CLK).
Adding EN signal on $procdff$646 ($dff) from module MappedSPIFlash (D = { \rcv_data [30:0] \MISO }, Q = \rcv_data).
Adding EN signal on $procdff$645 ($dff) from module MappedSPIFlash (D = $procmux$528_Y, Q = \rcv_bitcount).
Adding EN signal on $procdff$644 ($dff) from module MappedSPIFlash (D = $procmux$549_Y, Q = \cmd_addr).
Adding EN signal on $procdff$643 ($dff) from module MappedSPIFlash (D = $procmux$566_Y, Q = \snd_bitcount).
Adding EN signal on $procdff$641 ($dff) from module MappedSPIFlash (D = $procmux$582_Y, Q = \CS_N).
Adding EN signal on $procdff$640 ($dff) from module MappedSPIFlash (D = $procmux$594_Y, Q = \rbusy).

2.12.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 13 unused cells and 22 unused wires.

2.12.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.12.9. Rerunning OPT passes. (Maybe there is more to do..)

2.12.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.12.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.12.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 10 cells.

2.12.13. Executing OPT_DFF pass (perform DFF optimizations).

2.12.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 10 unused wires.

2.12.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.12.16. Rerunning OPT passes. (Maybe there is more to do..)

2.12.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.12.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.12.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.12.20. Executing OPT_DFF pass (perform DFF optimizations).

2.12.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.12.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.12.23. Finished OPT passes. (There is nothing left to do.)

2.13. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port B of cell MappedSPIFlash.$ge$MappedSPIFlash_V3.v:50$3 ($ge).
Removed top 31 bits (of 32) from port B of cell MappedSPIFlash.$add$MappedSPIFlash_V3.v:57$7 ($add).
Removed top 26 bits (of 32) from port Y of cell MappedSPIFlash.$add$MappedSPIFlash_V3.v:57$7 ($add).
Removed top 4 bits (of 6) from port B of cell MappedSPIFlash.$eq$MappedSPIFlash_V3.v:58$8 ($eq).
Removed top 5 bits (of 6) from port B of cell MappedSPIFlash.$eq$MappedSPIFlash_V3.v:97$14 ($eq).
Removed top 5 bits (of 6) from port B of cell MappedSPIFlash.$sub$MappedSPIFlash_V3.v:102$15 ($sub).
Removed top 5 bits (of 6) from port B of cell MappedSPIFlash.$eq$MappedSPIFlash_V3.v:113$16 ($eq).
Removed top 5 bits (of 6) from port B of cell MappedSPIFlash.$sub$MappedSPIFlash_V3.v:117$17 ($sub).
Removed top 1 bits (of 3) from port B of cell MappedSPIFlash.$auto$fsm_map.cc:77:implement_pattern_cache$676 ($eq).
Removed top 1 bits (of 2) from port B of cell MappedSPIFlash.$auto$fsm_map.cc:77:implement_pattern_cache$681 ($eq).
Removed top 1 bits (of 2) from port B of cell MappedSPIFlash.$auto$fsm_map.cc:77:implement_pattern_cache$690 ($eq).
Removed cell MappedSPIFlash.$procmux$524 ($mux).
Removed cell MappedSPIFlash.$procmux$526 ($mux).
Removed cell MappedSPIFlash.$procmux$532 ($mux).
Removed cell MappedSPIFlash.$procmux$534 ($mux).
Removed cell MappedSPIFlash.$procmux$545 ($mux).
Removed cell MappedSPIFlash.$procmux$547 ($mux).
Removed top 1 bits (of 3) from port B of cell MappedSPIFlash.$auto$fsm_map.cc:77:implement_pattern_cache$698 ($eq).
Removed cell MappedSPIFlash.$procmux$552 ($mux).
Removed cell MappedSPIFlash.$procmux$562 ($mux).
Removed cell MappedSPIFlash.$procmux$564 ($mux).
Removed cell MappedSPIFlash.$procmux$569 ($mux).
Removed cell MappedSPIFlash.$procmux$580 ($mux).
Removed cell MappedSPIFlash.$procmux$594 ($pmux).
Removed cell MappedSPIFlash.$procmux$612 ($mux).
Removed cell MappedSPIFlash.$procmux$615 ($mux).
Removed top 26 bits (of 32) from wire MappedSPIFlash.$add$MappedSPIFlash_V3.v:57$7_Y.
Removed top 10 bits (of 32) from wire MappedSPIFlash.$procmux$552_Y.

2.14. Executing PEEPOPT pass (run peephole optimizers).

2.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 16 unused wires.

2.16. Executing SHARE pass (SAT-based resource sharing).

2.17. Executing TECHMAP pass (map to technology primitives).

2.17.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.17.2. Continuing TECHMAP pass.
No more expansions possible.

2.18. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.19. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.20. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module MappedSPIFlash:
  creating $macc model for $add$MappedSPIFlash_V3.v:57$7 ($add).
  creating $macc model for $sub$MappedSPIFlash_V3.v:102$15 ($sub).
  creating $macc model for $sub$MappedSPIFlash_V3.v:117$17 ($sub).
  creating $alu model for $macc $sub$MappedSPIFlash_V3.v:117$17.
  creating $alu model for $macc $sub$MappedSPIFlash_V3.v:102$15.
  creating $alu model for $macc $add$MappedSPIFlash_V3.v:57$7.
  creating $alu model for $ge$MappedSPIFlash_V3.v:50$3 ($ge): new $alu
  creating $alu cell for $ge$MappedSPIFlash_V3.v:50$3: $auto$alumacc.cc:485:replace_alu$770
  creating $alu cell for $add$MappedSPIFlash_V3.v:57$7: $auto$alumacc.cc:485:replace_alu$779
  creating $alu cell for $sub$MappedSPIFlash_V3.v:102$15: $auto$alumacc.cc:485:replace_alu$782
  creating $alu cell for $sub$MappedSPIFlash_V3.v:117$17: $auto$alumacc.cc:485:replace_alu$785
  created 4 $alu and 0 $macc cells.

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.21.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.21.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
    New input vector for $reduce_or cell $auto$opt_dff.cc:257:combine_resets$705: { $auto$rtlil.cc:2266:ReduceAnd$776 $auto$rtlil.cc:2263:Not$774 $auto$fsm_map.cc:74:implement_pattern_cache$660 }
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 1 changes.

2.21.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.21.6. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$opt_dff.cc:744:run$765 ($dffe) from module MappedSPIFlash.

2.21.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 1 unused wires.

2.21.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.21.9. Rerunning OPT passes. (Maybe there is more to do..)

2.21.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.21.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.21.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.21.13. Executing OPT_DFF pass (perform DFF optimizations).

2.21.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.21.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.21.16. Finished OPT passes. (There is nothing left to do.)

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.22.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.22.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.22.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.22.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.22.9. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$opt_dff.cc:744:run$740 ($dffe) from module MappedSPIFlash (D = { \cmd_addr [30:21] \cmd_addr [0] }, Q = { \cmd_addr [31:22] \cmd_addr [1] }, rval = 11'00000011000).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 1 unused wires.

2.27.5. Rerunning OPT passes. (Removed registers in this run.)

2.27.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.27.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.27.8. Executing OPT_DFF pass (perform DFF optimizations).

2.27.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.27.10. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \MappedSPIFlash..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \MappedSPIFlash.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/techmap.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using template $paramod$32efbfac1c4dc57230cf86180788fdfd12e3b511\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod$a04dd9d4d8b430140c4ff94b50470fb380fda2a0\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $dffe.
Using template $paramod$ed0bb9616228df1e6c226f91f8133e751815f1b1\_90_pmux for cells of type $pmux.
Using template $paramod$4f7462fd7944a40ab328577064922bdf555975a5\_80_ice40_alu for cells of type $alu.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $sdff.
Using extmapper simplemap for cells of type $sdffe.
Using extmapper simplemap for cells of type $sdffce.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 32 cells.

2.32.3. Executing OPT_DFF pass (perform DFF optimizations).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 21 unused cells and 206 unused wires.

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$770.slice[0].carry: CO=$auto$alumacc.cc:485:replace_alu$770.BB [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$779.slice[0].carry: CO=\div_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$782.slice[0].carry: CO=\snd_bitcount [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$785.slice[0].carry: CO=\rcv_bitcount [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.33.4. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1285 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$566.Y_B [5], Q = \snd_bitcount [5], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1284 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$566.B_AND_S [4], Q = \snd_bitcount [4], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1283 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$566.B_AND_S [3], Q = \snd_bitcount [3], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1282 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$566.B_AND_S [2], Q = \snd_bitcount [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1281 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$566.B_AND_S [1], Q = \snd_bitcount [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1280 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$566.B_AND_S [0], Q = \snd_bitcount [0], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1252 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$528.Y_B [5], Q = \rcv_bitcount [5], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1251 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$528.B_AND_S [4], Q = \rcv_bitcount [4], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1250 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$528.B_AND_S [3], Q = \rcv_bitcount [3], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1249 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$528.B_AND_S [2], Q = \rcv_bitcount [2], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1248 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$528.B_AND_S [1], Q = \rcv_bitcount [1], rval = 1'0).
Adding SRST signal on $auto$simplemap.cc:442:simplemap_dffe$1247 ($_DFFE_NP_) from module MappedSPIFlash (D = $procmux$528.B_AND_S [0], Q = \rcv_bitcount [0], rval = 1'0).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 13 unused cells and 2 unused wires.

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.33.10. Executing OPT_DFF pass (perform DFF optimizations).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.35. Executing TECHMAP pass (map to technology primitives).

2.35.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.35.2. Continuing TECHMAP pass.
Using template \$_DFF_N_ for cells of type $_DFF_N_.
Using template \$_DFFE_NP_ for cells of type $_DFFE_NP_.
Using template \$_SDFF_NP0_ for cells of type $_SDFF_NP0_.
Using template \$_SDFFCE_NP0P_ for cells of type $_SDFFCE_NP0P_.
Using template \$_SDFFCE_NP1P_ for cells of type $_SDFFCE_NP1P_.
No more expansions possible.

2.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.37. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$779.slice[0].carry ($lut).
Mapping MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$782.slice[0].carry ($lut).
Mapping MappedSPIFlash.$auto$alumacc.cc:485:replace_alu$785.slice[0].carry ($lut).

2.38. Executing ICE40_OPT pass (performing simple optimizations).

2.38.1. Running ICE40 specific optimizations.

2.38.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.38.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 28 cells.

2.38.4. Executing OPT_DFF pass (perform DFF optimizations).

2.38.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..
Removed 0 unused cells and 502 unused wires.

2.38.6. Rerunning OPT passes. (Removed registers in this run.)

2.38.7. Running ICE40 specific optimizations.

2.38.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module MappedSPIFlash.

2.38.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\MappedSPIFlash'.
Removed a total of 0 cells.

2.38.10. Executing OPT_DFF pass (perform DFF optimizations).

2.38.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \MappedSPIFlash..

2.38.12. Finished OPT passes. (There is nothing left to do.)

2.39. Executing TECHMAP pass (map to technology primitives).

2.39.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.39.2. Continuing TECHMAP pass.
No more expansions possible.

2.40. Executing ABC pass (technology mapping using ABC).

2.40.1. Extracting gate netlist of module `\MappedSPIFlash' to `<abc-temp-dir>/input.blif'..
Extracted 144 gates and 222 wires to a netlist network with 78 inputs and 56 outputs.

2.40.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      64.
ABC: Participating nodes from both networks       =     130.
ABC: Participating nodes from the first network   =      63. (  87.50 % of nodes)
ABC: Participating nodes from the second network  =      67. (  93.06 % of nodes)
ABC: Node pairs (any polarity)                    =      63. (  87.50 % of names can be moved)
ABC: Node pairs (same polarity)                   =      58. (  80.56 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.40.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       71
ABC RESULTS:        internal signals:       88
ABC RESULTS:           input signals:       78
ABC RESULTS:          output signals:       56
Removing temp directory.

2.41. Executing ICE40_WRAPCARRY pass (wrap carries).

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/ff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFFCE_NP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_NP1P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP0P_'.
Generating RTLIL representation for module `\$_SDFFCE_PP1P_'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 8 unused cells and 188 unused wires.

2.43. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       86
  1-LUT                9
  2-LUT               22
  3-LUT               41
  4-LUT               14
  with \SB_CARRY    (#0)   12
  with \SB_CARRY    (#1)   13

Eliminating LUTs.
Number of LUTs:       86
  1-LUT                9
  2-LUT               22
  3-LUT               41
  4-LUT               14
  with \SB_CARRY    (#0)   12
  with \SB_CARRY    (#1)   13

Combining LUTs.
Number of LUTs:       76
  1-LUT                9
  2-LUT               12
  3-LUT               31
  4-LUT               24
  with \SB_CARRY    (#0)   12
  with \SB_CARRY    (#1)   13

Eliminated 0 LUTs.
Combined 10 LUTs.

2.44. Executing TECHMAP pass (map to technology primitives).

2.44.1. Executing Verilog-2005 frontend: /home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/home/carlos/miniconda3/envs/fpga/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.44.2. Continuing TECHMAP pass.
Using template $paramod$0de052767abdccc3aefc818722bdc3c7850d25d6\$lut for cells of type $lut.
Using template $paramod$272652f6c6fbe9a75eff76e45cc7e2788835518b\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0001 for cells of type $lut.
Using template $paramod$fb5ee0bdef1c4e74aaf1fd8efae98b46a2f5e564\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11100000 for cells of type $lut.
Using template $paramod$c84fab5e7b37c95087ffba9e140088af3811754c\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'11001010 for cells of type $lut.
Using template $paramod$fd904e9e35cfd343a9df248824bd3f1408724879\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00001011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00000001 for cells of type $lut.
Using template $paramod$6e238df02989b317f10820a22773676e71120644\$lut for cells of type $lut.
Using template $paramod$571404c0889eaf57f492cb5e37f8acb5df5852f9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000010\LUT=4'1000 for cells of type $lut.
Using template $paramod$c5f3c57a6d466a2f42208bafb8985b96ce884440\$lut for cells of type $lut.
Using template $paramod$bba54c1ef87367812b4c15f4aed5ac70773df775\$lut for cells of type $lut.
Using template $paramod$fc318a7df7fe07fd6e06d67fcbc358e9823ea389\$lut for cells of type $lut.
Using template $paramod$6b0849254d6c87461fb93e37cc18f089f61eb912\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000001\LUT=2'01 for cells of type $lut.
Using template $paramod$b4d0f4738a5ce50c7f36c2aa2ecc09cfb874f2b6\$lut for cells of type $lut.
Using template $paramod$1bf62ab10e48d71d6497bccacf5c70420c470fe9\$lut for cells of type $lut.
Using template $paramod\$lut\WIDTH=32'00000000000000000000000000000011\LUT=8'10001111 for cells of type $lut.
No more expansions possible.
Removed 0 unused cells and 164 unused wires.

2.45. Executing AUTONAME pass.
Renamed 956 objects in module MappedSPIFlash (16 iterations).

2.46. Executing HIERARCHY pass (managing design hierarchy).

2.46.1. Analyzing design hierarchy..
Top module:  \MappedSPIFlash

2.46.2. Analyzing design hierarchy..
Top module:  \MappedSPIFlash
Removed 0 unused modules.

2.47. Printing statistics.

=== MappedSPIFlash ===

   Number of wires:                 71
   Number of wire bits:            294
   Number of public wires:          71
   Number of public wire bits:     294
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                182
     SB_CARRY                       17
     SB_DFFN                         4
     SB_DFFNE                       54
     SB_DFFNESR                     22
     SB_DFFNESS                      2
     SB_DFFNSR                       7
     SB_LUT4                        76

2.48. Executing CHECK pass (checking for obvious problems).
Checking module MappedSPIFlash...
Found and reported 0 problems.

2.49. Executing JSON backend.

3. Executing Verilog backend.
Dumping module `\MappedSPIFlash'.

End of script. Logfile hash: bfe2dc47d0, CPU: user 0.27s system 0.03s, MEM: 59.19 MB peak
Yosys 0.9+4288 (git sha1 b2e97174, x86_64-conda_cos6-linux-gnu-gcc 1.24.0.133_b0863d8_dirty -fvisibility-inlines-hidden -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -fdebug-prefix-map=/home/runner/work/conda-eda/conda-eda/workdir/conda-env/conda-bld/yosys_1630451134687/work=/usr/local/src/conda/yosys-0.9_5586_gb2e97174 -fdebug-prefix-map=/home/carlos/miniconda3/envs/fpga=/usr/local/src/conda-prefix -fPIC -Os -fno-merge-constants)
Time spent: 26% 11x read_verilog (0 sec), 17% 1x abc (0 sec), ...
